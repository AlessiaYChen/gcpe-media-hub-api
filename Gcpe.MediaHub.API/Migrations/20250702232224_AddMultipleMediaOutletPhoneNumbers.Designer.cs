// <auto-generated />
using System;
using Gcpe.MediaHub.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gcpe.MediaHub.API.Migrations
{
    [DbContext(typeof(GcpeMediaHubAPIContext))]
    [Migration("20250702232224_AddMultipleMediaOutletPhoneNumbers")]
    partial class AddMultipleMediaOutletPhoneNumbers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MediaOutletId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.Property<string>("RuralRoute")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaOutletId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPressGallery")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonalWebsite")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.ToTable("MediaContacts");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContactEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OutletContactRelationshipId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutletContactRelationshipId");

                    b.ToTable("MediaContactEmails");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContactPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OutletContactRelationshipId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OutletContactRelationshipId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("MediaContactPhone");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContactPhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaContactPhoneTypes");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutlet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMajorMedia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OutletName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentOutletId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PhoneNumberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentOutletId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("MediaOutlets");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutletContactRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MediaContactId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MediaOutletId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaContactId");

                    b.HasIndex("MediaOutletId");

                    b.ToTable("MediaOutletContactRelationship");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutletPhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MediaOutletId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MediaOutletPhoneTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaOutletId");

                    b.HasIndex("MediaOutletPhoneTypeId");

                    b.ToTable("MediaOutletPhoneNumbers");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutletPhoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaOutletPhoneTypes");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FYIContactUserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LeadMinistryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ReceivedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("RequestDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestResolutionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestStatusId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestTypeId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RequestorContactId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RequestorOutletId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("FYIContactUserId");

                    b.HasIndex("LeadMinistryId");

                    b.HasIndex("RequestResolutionId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("RequestorContactId");

                    b.HasIndex("RequestorOutletId");

                    b.ToTable("MediaRequests");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.Ministry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ministries");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.PersonalPhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MediaContactId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaContactId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("PersonalPhoneNumber");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PhoneExtension")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhoneLineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.RequestResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RequestResolutions");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MediaContactId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MediaOutletId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SocialMediaCompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SocialProfileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaContactId");

                    b.HasIndex("MediaOutletId");

                    b.HasIndex("SocialMediaCompanyId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.SocialMediaCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaCompanies");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.SpokenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SpokenLanguages");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IDIR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.WrittenLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WrittenLanguages");
                });

            modelBuilder.Entity("MediaOutletMediaType", b =>
                {
                    b.Property<Guid>("MediaOutletsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaTypesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaOutletsId", "MediaTypesId");

                    b.HasIndex("MediaTypesId");

                    b.ToTable("MediaOutletMediaType");
                });

            modelBuilder.Entity("MediaOutletWrittenLanguage", b =>
                {
                    b.Property<Guid>("MediaOutletsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("WrittenLanguagesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaOutletsId", "WrittenLanguagesId");

                    b.HasIndex("WrittenLanguagesId");

                    b.ToTable("MediaOutletWrittenLanguage");
                });

            modelBuilder.Entity("MediaRequestMinistry", b =>
                {
                    b.Property<Guid>("AdditionalMediaRequestsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AdditionalMinistriesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AdditionalMediaRequestsId", "AdditionalMinistriesId");

                    b.HasIndex("AdditionalMinistriesId");

                    b.ToTable("MediaRequestAdditionalMinistries", (string)null);
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.Address", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", "MediaOutlet")
                        .WithMany("Addresses")
                        .HasForeignKey("MediaOutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaOutlet");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContact", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.JobTitle", "JobTitle")
                        .WithMany("MediaContacts")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContactEmail", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutletContactRelationship", "OutletContactRelationship")
                        .WithMany("Emails")
                        .HasForeignKey("OutletContactRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutletContactRelationship");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContactPhone", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutletContactRelationship", "OutletContactRelationship")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("OutletContactRelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaContactPhoneType", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutletContactRelationship");

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutlet", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", "ParentOutlet")
                        .WithMany("ChildOutlets")
                        .HasForeignKey("ParentOutletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gcpe.MediaHub.API.Models.PhoneNumber", "PhoneNumber")
                        .WithMany("MediaOutlets")
                        .HasForeignKey("PhoneNumberId");

                    b.Navigation("ParentOutlet");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutletContactRelationship", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaContact", "MediaContact")
                        .WithMany("MediaOutletContactRelationships")
                        .HasForeignKey("MediaContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", "MediaOutlet")
                        .WithMany()
                        .HasForeignKey("MediaOutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContact");

                    b.Navigation("MediaOutlet");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutletPhoneNumber", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", "MediaOutlet")
                        .WithMany("MediaOutletPhoneNumbers")
                        .HasForeignKey("MediaOutletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutletPhoneType", "MediaOutletPhoneType")
                        .WithMany()
                        .HasForeignKey("MediaOutletPhoneTypeId");

                    b.Navigation("MediaOutlet");

                    b.Navigation("MediaOutletPhoneType");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaRequest", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.User", "AssignedUser")
                        .WithMany("MediaRequests")
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("Gcpe.MediaHub.API.Models.User", "FYIContactUser")
                        .WithMany()
                        .HasForeignKey("FYIContactUserId");

                    b.HasOne("Gcpe.MediaHub.API.Models.Ministry", "LeadMinistry")
                        .WithMany("LeadMediaRequests")
                        .HasForeignKey("LeadMinistryId");

                    b.HasOne("Gcpe.MediaHub.API.Models.RequestResolution", "RequestResolution")
                        .WithMany("MediaRequests")
                        .HasForeignKey("RequestResolutionId");

                    b.HasOne("Gcpe.MediaHub.API.Models.RequestStatus", "RequestStatus")
                        .WithMany("MediaRequests")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.RequestType", "RequestType")
                        .WithMany("MediaRequests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaContact", "RequestorContact")
                        .WithMany("MediaRequests")
                        .HasForeignKey("RequestorContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", "RequestorOutlet")
                        .WithMany("MediaRequests")
                        .HasForeignKey("RequestorOutletId");

                    b.Navigation("AssignedUser");

                    b.Navigation("FYIContactUser");

                    b.Navigation("LeadMinistry");

                    b.Navigation("RequestResolution");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("RequestorContact");

                    b.Navigation("RequestorOutlet");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.PersonalPhoneNumber", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaContact", null)
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("MediaContactId");

                    b.HasOne("Gcpe.MediaHub.API.Models.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.SocialMedia", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaContact", "MediaContact")
                        .WithMany("SocialMedias")
                        .HasForeignKey("MediaContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", "MediaOutlet")
                        .WithMany("SocialMedias")
                        .HasForeignKey("MediaOutletId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gcpe.MediaHub.API.Models.SocialMediaCompany", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("SocialMediaCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaContact");

                    b.Navigation("MediaOutlet");
                });

            modelBuilder.Entity("MediaOutletMediaType", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", null)
                        .WithMany()
                        .HasForeignKey("MediaOutletsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.MediaType", null)
                        .WithMany()
                        .HasForeignKey("MediaTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaOutletWrittenLanguage", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaOutlet", null)
                        .WithMany()
                        .HasForeignKey("MediaOutletsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.WrittenLanguage", null)
                        .WithMany()
                        .HasForeignKey("WrittenLanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaRequestMinistry", b =>
                {
                    b.HasOne("Gcpe.MediaHub.API.Models.MediaRequest", null)
                        .WithMany()
                        .HasForeignKey("AdditionalMediaRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gcpe.MediaHub.API.Models.Ministry", null)
                        .WithMany()
                        .HasForeignKey("AdditionalMinistriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.JobTitle", b =>
                {
                    b.Navigation("MediaContacts");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaContact", b =>
                {
                    b.Navigation("MediaOutletContactRelationships");

                    b.Navigation("MediaRequests");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutlet", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ChildOutlets");

                    b.Navigation("MediaOutletPhoneNumbers");

                    b.Navigation("MediaRequests");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.MediaOutletContactRelationship", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.Ministry", b =>
                {
                    b.Navigation("LeadMediaRequests");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.PhoneNumber", b =>
                {
                    b.Navigation("MediaOutlets");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.RequestResolution", b =>
                {
                    b.Navigation("MediaRequests");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.RequestStatus", b =>
                {
                    b.Navigation("MediaRequests");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.RequestType", b =>
                {
                    b.Navigation("MediaRequests");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.SocialMediaCompany", b =>
                {
                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Gcpe.MediaHub.API.Models.User", b =>
                {
                    b.Navigation("MediaRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
